(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{434:function(e,a,r){"use strict";r.r(a);var s=r(2),t=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[e._v("#")]),e._v(" 浅拷贝")]),e._v(" "),a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[e._v("#")]),e._v(" 概念")]),e._v(" "),a("p",[a("strong",[e._v("新的对象复制已有对象中非对象属性的值和对象属性的引用")]),e._v("。也可以理解为："),a("strong",[e._v("一个新的对象直接拷贝已存在的对象的对象属性的引用")]),e._v("，即浅拷贝。")]),e._v(" "),a("p",[e._v("浅拷贝"),a("strong",[e._v("只对第一层属性进行了拷贝")]),e._v("，当第一层的属性值是基本数据类型时，新的对象和原对象互不影响，但是如果第一层的属性值是复杂数据类型，那么新对象和原对象的属性值其指向的是同一块内存地址。")]),e._v(" "),a("h2",{attrs:{id:"实现浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现浅拷贝"}},[e._v("#")]),e._v(" 实现浅拷贝")]),e._v(" "),a("ol",[a("li",[e._v("Object.assign()")])]),e._v(" "),a("p",[e._v("语法：Object.assign(target, ...source)ES6中拷贝对象的方法，第一个参数是拷贝的目标target,剩下的参数是拷贝的源对象（可以是多个）")]),e._v(" "),a("blockquote",[a("p",[e._v("浅拷贝只是在根属性(对象的第一层级)创建了一个新的对象，但是对于属性的值是对象的话只会拷贝一份相同的内存地址")])]),e._v(" "),a("blockquote",[a("p",[e._v("Object.assign()使用注意:")])]),e._v(" "),a("ul",[a("li",[e._v("只拷贝源对象的自身属性(不拷贝继承属性)")]),e._v(" "),a("li",[e._v("不会拷贝对象不可枚举的属性")]),e._v(" "),a("li",[e._v("属性名为Symbol值的属性，可以被Object.assign拷贝")]),e._v(" "),a("li",[e._v("undefined和null无法转成对象，他们不能作为Object.assign的参数，但是可以作为源对象")])]),e._v(" "),a("blockquote",[a("p",[e._v("Object.assign(undefined) //报错"),a("br"),e._v("\nObject.assign(null)//报错"),a("br"),e._v("\nObject.assign({}, undefined) //{}\nObject.assign({}, null) //{}")])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Array.prototype.slice()")])]),e._v(" "),a("p",[e._v("语法：arr.slice([begin[,end]])  slice()方法返回一个新的数组对象，这一对象是一个由begin和end决定的原数组的浅拷贝(包含begin，不包含end)。原始数组不会被改变")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  let initUserArr = ['John', 'san', {name: 'Jery'}]\n  let sliceArr = Array.prototype.slice.call(initUserArr)\n  sliceArr[0] = 'John1'\n  sliceArr[2][name] = 'Jery1'\n  console.log(\"原始数据：\" + initUserArr[0]) //John\n  console.log(\"浅拷贝后的数据：\" + sliceArr[0]) //John1\n  console.log(\"原始数据：\" + initUserArr[2][name]) //Jery1\n  console.log(\"浅拷贝后的数据：\" + sliceArr[2][name]) //Jery1\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Array.prototype.concat()")])]),e._v(" "),a("p",[e._v("语法： var new_array = old_array.concat(value1[, value2[, ...[, valueN]]]) concat()方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  let user1 = [{name: 'amy'}, {age: 28}]\n  let user2 = [{address: 'shanghai'}, {job: 'program'}]\n  let concatUser = user1.concat(user2)\n  user2[0].address = '上海'\n  console.log(user1) //[{name: 'amy'}, {age: 28}]\n  console.log(user2) //[{address: '上海'}, {job: 'program'}]\n  console.log(concatUser) //[{name: 'amy'}, {age: 28},{address: '上海'}, {job: 'program'}]\n")])])]),a("blockquote",[a("p",[e._v("Array.prototype.concat 也是一个浅拷贝，只是在根属性(对象的第一层级)创建了一个新的对象，但是对于属性的值是对象的话只会拷贝一份相同的内存地址。")])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[e._v("拓展运算符(...)")])]),e._v(" "),a("p",[e._v("语法：var cloneObj = { ...obj }  扩展运算符也是浅拷贝，对于值是对象的属性无法完全拷贝成2个不同对象，但是如果属性都是基本类型的值的话，使用扩展运算符也是优势方便的地方。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('  let firstUser = { name: \'leo\', detail: { age: 18, sex: \'man\'}}\n  let lastUser = {...firstUser}\n  lastUser.name = \'Jane\'\n  lastUser.detail.age = 20\n  console.log("原始数据：" + firstUser.name) //leo\n  console.log("浅拷贝后的数据：" + lastUser.name) //Jane\n  console.log("原始数据：" + firstUser.detail.age) //20\n  console.log("浅拷贝后的数据：" + lastUser.detail.age) //20\n')])])]),a("h2",{attrs:{id:"手写浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写浅拷贝"}},[e._v("#")]),e._v(" 手写浅拷贝")]),e._v(" "),a("p",[e._v("实现原理：新的对象复制已有对象中非对象属性的值和对象属性的"),a("strong",[e._v("引用")]),e._v(",也就是说对象属性并不复制到内存。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('  let firstUser = { name: \'leo\', detail: { age: 18, sex: \'man\'}}\n  function lightCopy (source) {\n    let target = {}\n    for (let key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key]\n      }\n    }\n    return target\n  }\n\n  let copyArr = lightCopy(firstUser)\n  copyArr.name = \'light\'\n  console.log("原始数据：" + firstUser.name) //leo\n  console.log("浅拷贝后的数据：" + copyArr.name) //light\n  console.log("原始数据：" + firstUser.detail.age) //20\n  console.log("浅拷贝后的数据：" + copyArr.detail.age) //20\n')])])]),a("ul",[a("li",[e._v("for ... in")])]),e._v(" "),a("p",[e._v("for...in语句以任意顺序遍历一个对象自有的、继承的、可枚举的、非Symbol的属性。对于每个不同的属性，语句都会被执行。")]),e._v(" "),a("ul",[a("li",[e._v("hasOwnProperty")])]),e._v(" "),a("p",[e._v("该函数返回值为布尔值，所有继承了 Object 的对象都会继承到 hasOwnProperty 方法，和 in 运算符不同，该函数会忽略掉那些从原型链上继承到的属性和自身属性。\n语法：obj.hasOwnProperty(prop)\nprop 是要检测的属性字符串名称或者Symbol。")]),e._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("p",[e._v("将对象的每个属性进行依次复制，但是当对象的属性值是引用类型时，实质复制的是其引用，当引用指向的值改变时也会跟着变化。")]),e._v(" "),a("blockquote",[a("p",[e._v("浅拷贝只拷贝一层")])])])}),[],!1,null,null,null);a.default=t.exports}}]);