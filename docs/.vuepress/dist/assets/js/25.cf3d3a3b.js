(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{432:function(a,t,s){"use strict";s.r(t);var e=s(2),l=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[a._v("#")]),a._v(" 作用")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("call、apply、bind的作用是改变函数运行时this的指向\n")])])]),t("h3",{attrs:{id:"方法调用模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法调用模式"}},[a._v("#")]),a._v(" 方法调用模式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("当一个函数被保存为对象的一个方法时，如果调用表达式包含一个提取属性的动作，那么它就  是被当做一个方法来调用，此时的this被绑定到这个对象。\n\n> DOM对象绑定事件也属于方法调用模式，因此它绑定的this就是事件源DOM对象\n\n```\ndocument.addEventListener('click', function(e) {\n    console.log(e) //document对象\n    setTimeout(function(){\n        console.log(this) //window对象\n    }, 200)\n}, false)\n\n```\n")])])]),t("blockquote",[t("p",[a._v("点击页面监听click事件属于方法调用，this指向事件源DOM对象，即obj.fn.apply(obj)，setTimeout内的函数属于回调函数，可以这么理解，f1.call(null,f2)，所以this指向window")])]),a._v(" "),t("h3",{attrs:{id:"函数调用模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数调用模式"}},[a._v("#")]),a._v(" 函数调用模式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("就是普通函数的调用，此时的this被绑定到window \n")])])]),t("h3",{attrs:{id:"构造器调用模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造器调用模式"}},[a._v("#")]),a._v(" 构造器调用模式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("new一个函数时，背地里会将创建一个连接到prototype成员的新对象，同时this会被绑定到那个新对象上\n")])])]),t("h3",{attrs:{id:"call"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#call"}},[a._v("#")]),a._v(" call")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("call 方法第一个参数是要绑定给this的值，后面传入的是一个参数列表。当第一个参数为null、undefined的时候，默认指向window。\n")])])]),t("h3",{attrs:{id:"apply"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#apply"}},[a._v("#")]),a._v(" apply")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("apply接受两个参数，第一个参数是要绑定给this的值，第二个参数是一个参数数组。当第一个参数为null、undefined的时候，默认指向window。\n")])])]),t("h3",{attrs:{id:"bind"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[a._v("#")]),a._v(" bind")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("和call很相似，第一个参数是this的指向，从第二个参数开始是接收的参数列表。区别在于bind方法返回值是函数以及bind接收的参数列表的使用。\n")])])]),t("h3",{attrs:{id:"call、apply和bind函数存在的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#call、apply和bind函数存在的区别"}},[a._v("#")]),a._v(" call、apply和bind函数存在的区别:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("bind返回对应函数, 便于稍后调用； apply, call则是立即调用。\n")])])]),t("blockquote",[t("p",[a._v("除此外, 在 ES6 的箭头函数下, call 和 apply 将失效, 对于箭头函数来说:")])]),a._v(" "),t("ul",[t("li",[a._v("箭头函数体内的 this 对象, 就是定义时所在的对象, 而不是使用时所在的对象;所以不需要类似于var _this =  this这种丑陋的写法")]),a._v(" "),t("li",[a._v("箭头函数不可以当作构造函数，也就是说不可以使用 new 命令, 否则会抛出一个错误")]),a._v(" "),t("li",[a._v("箭头函数不可以使用 arguments 对象,，该对象在函数体内不存在. 如果要用, 可以用 Rest 参数代替")]),a._v(" "),t("li",[a._v("不可以使用 yield 命令, 因此箭头函数不能用作 Generator 函数")])]),a._v(" "),t("h3",{attrs:{id:"链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[a._v("#")]),a._v(" 链接")]),a._v(" "),t("blockquote",[t("p",[a._v("https://www.jianshu.com/p/bc541afad6ee")])])])}),[],!1,null,null,null);t.default=l.exports}}]);